####################################
# AUTHENTIK
####################################

services:
  worker:
    container_name: authentik_worker
    image: ghcr.io/goauthentik/server
    profiles: ["apps", "all", "auth", "authentik", "core"]
    user: root
    command: worker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIRECTORY}/appdata/authentik/media:/media
      - ${DOCKER_DIRECTORY}/appdata/authentik/certs:/certs
      - ${DOCKER_DIRECTORY}/apps/authentik/templates:/templates
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:-authentik}
      AUTHENTIK_LISTEN__TRUSTED_PROXY_CIDRS: "*"
    restart: ${UNIVERSAL_RESTART_POLICY:-unless-stopped}
    networks:
      internal:
    depends_on:
      - postgresql
      - redis
  server:
    container_name: authentik_server
    image: ghcr.io/goauthentik/server
    profiles: ["apps", "all", "auth", "authentik", "core"]
    command: server
    volumes:
      - ${DOCKER_DIRECTORY}/appdata/authentik/media:/media
      - ${DOCKER_DIRECTORY}/apps/authentik/templates:/templates
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:-authentik}
      AUTHENTIK_LISTEN__TRUSTED_PROXY_CIDRS: "*"
    restart: ${UNIVERSAL_RESTART_POLICY:-unless-stopped}
    networks:
      traefik:
      internal:
    labels:
      traefik.enable: true
      traefik.http.routers.authentik.rule: Host(`${AUTHENTIK_SUBDOMAIN:-authentik}.${DOMAIN_NAME}`)
      traefik.http.routers.authentik.entrypoints: websecure
      traefik.http.routers.authentik.service: authentik
      traefik.http.services.authentik.loadbalancer.server.port: 9000

      homepage.group: Apps
      homepage.name: Authentik
      homepage.icon: si-authentik
      homepage.href: https://${AUTHENTIK_SUBDOMAIN:-authentik}.${DOMAIN_NAME}
      homepage.description: Central authentication system
    depends_on:
      - postgresql
      - redis
  redis:
    container_name: authentik_redis
    image: docker.io/library/redis:alpine
    profiles: ["apps", "all", "auth", "authentik", "core"]
    command: --save 60 1 --loglevel warning
    volumes:
      - ${DOCKER_DIRECTORY}/appdata/authentik/redis:/data
    restart: ${UNIVERSAL_RESTART_POLICY:-unless-stopped}
    networks:
      internal:
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  postgresql:
    container_name: authentik_postgresql
    image: docker.io/library/postgres:alpine
    profiles: ["apps", "all", "auth", "authentik", "core"]
    volumes:
      - ${DOCKER_DIRECTORY}/appdata/authentik/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_PASSWORD: ${PG_PASS:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    restart: ${UNIVERSAL_RESTART_POLICY:-unless-stopped}
    networks:
      internal:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s